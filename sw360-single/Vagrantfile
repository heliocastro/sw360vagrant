# Copyright Siemens AG, 2013-2015,2020. Part of the SW360 Portal Project.
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require configuration settings
require_relative "../shared/configuration.rb"

unless ! Vagrant.has_plugin?("vagrant-aws")
  # Require the AWS provider plugin
  require 'vagrant-aws'
end

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # ssh configuration
  config.ssh.username = SW360_vagrant_user

  if SW360_use_insecure_Keypair == true
    config.ssh.private_key_path = "../shared/insecureKeypair/siemagrant"
  else
    config.ssh.private_key_path = "../shared/siemagrant_key_for_" + SW360_basebox_name
  end

  if SW360_provider == "virtualbox"

    # Every Vagrant virtual box environment requires a box to build off of.
    config.vm.box = SW360_basebox_name
    config.vm.boot_timeout = 600

    if SW360_network_host == true
      config.vm.network "private_network", ip: "192.168.1.200"
    end
    if SW360_https_port
      config.vm.network "forwarded_port", guest: 8443, host: SW360_https_port
    end
    if SW360_couchDB_port
      config.vm.network "forwarded_port", guest: 5984, host: SW360_couchDB_port
    end
    if SW360_tomcat_debug_port
      config.vm.network "forwarded_port", guest: 5005, host: SW360_tomcat_debug_port
    end

    # Virtualbox provider
    config.vm.provider :virtualbox do |v|
      v.name = SW360_vm_name
      v.customize ["modifyvm", :id, "--cpus", SW360_VB_CPUs, "--memory", SW360_VB_RAM]
    end

  else

    unless Vagrant.has_plugin?("vagrant-aws")
      raise 'vagrant-aws is not installed!'
    end

    # Every Vagrant virtual box environment requires a box to build off of.
    # AWS can use a dummy box because its using a AMI anyway.
    config.vm.box = 'aws-dummy'

    # AWS provider
    config.vm.provider :aws do |aws, override|

      # Read AWS authentication information from environment variables
      aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
      aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']

      # Specify SSH keypair to use for the EC2 instance
      aws.keypair_name = SW360_AWS_keypair_name

      # Specify region, AMI ID, and security group(s)
      aws.region = SW360_AWS_region
      aws.availability_zone = SW360_AWS_availability_zone
      aws.ami = SW360_AWS_ami_single
      aws.instance_type = SW360_AWS_instance_type
      aws.subnet_id = SW360_AWS_subnet_id
      aws.security_groups = SW360_AWS_security_groups
      aws.block_device_mapping = [
          {
              'DeviceName' => SW360_AWS_device_mapping_name,
              'VirtualName' => SW360_AWS_device_mapping_virtual_name,
              'Ebs.VolumeSize' => SW360_AWS_device_mapping_ebs_size,
              'Ebs.VolumeType' => SW360_AWS_device_mapping_type,
              'Ebs.DeleteOnTermination' => false,
          }
      ]

      # Tag each sw360 instance with a name
      aws.tags = {
          'Name' => SW360_vm_name
      }

      # Set options for NFS
      override.nfs.functional = false

    end

  end

  # see: https://github.com/mitchellh/vagrant/pull/4707
  config.ssh.insert_key = false

  config.vm.synced_folder "../shared", "/vagrant_shared"

  # for this feature to work performant one needs Vagrant to be at least of version 1.5
  if SW360_source
    if File.directory?(SW360_source)
      if Vagrant::VERSION.to_f >= 1.5
        config.vm.synced_folder SW360_source, "/sw360portal",
                                type: "rsync",
                                rsync__auto: "true",
                                rsync__exclude: ["*/target/*"]
      else
        config.vm.synced_folder SW360_source, "/sw360portal"
      end
    end
  end

  # SW360 specific configuration
  config.vm.provision :puppet, :module_path => "../puppet/modules" do |puppet|
    puppet.manifests_path = "../puppet/manifests"
    puppet.manifest_file = "sw360-single.pp"

    puppet.facter = {
        "proxy_yes" => SW360_proxy,
        "https_port" => SW360_https_port,
        "tomcat_admin_password" => SW360_default_password,
        "liferay_admin_password" => SW360_default_password,
        "liferay_admin_name" => SW360_admin_name,
        "fossology_address" => SW360_fossology_address,
        "max_upload_filesize" => SW360_max_upload_filesize,
    }
  end

  if not File.exists?(File.join(File.dirname(__FILE__), ".vagrant/action_provision"))
    config.vm.provision "shell", run: "always" do |s|
      s.path = "sw360-install.sh"
      s.args = ["-0"]
      s.privileged = false
    end
  end

  if SW360_install == true
    config.vm.provision "shell" do |s|
      s.path = "sw360-install.sh"
      s.privileged = false
    end
  end

  config.vm.post_up_message = "End of provisioning. Please try to call sw360 using your browser, for example: https://localhost:8443/"
end
